Git Essentials

Before that,
Version Control System (VCS) = tool that tracks changes to files over time.
Think of it like a time machine for code ‚Äî you can see who changed what, when, and why, and roll back if needed.

Two types of VCS:

Centralized VCS (CVCS) ‚Äì one central server (e.g., SVN, CVS). Everyone pulls/pushes changes from that single place.
Problem: If server goes down, no one can work.

Distributed VCS (DVCS) ‚Äì every developer has a full copy of the repo (e.g., Git).
Benefit: Work offline, full history on your machine, safer, faster.
üëâ Git is a DVCS.

üîπ Why Git?

Tracks changes (who/when/what).
Allows branching & merging ‚Üí developers can work on features in isolation and then combine.
Handles conflicts when two people change the same part of a file.
Plays well with remote hosting platforms like GitHub, GitLab, Bitbucket for collaboration.

üîπ How We Manage Git

There are two ways:
Command-line (CLI) ‚Üí
Running Git commands on your machine/instance.

UI (Web Interface like GitHub/GitLab) ‚Üí
Manage repos visually (create repo, open pull requests, review code).
But actual development workflow (commits, branching, merges) is done locally via CLI.

üëâ In real-world DevOps jobs:
90% Git work ‚Üí from terminal (your instance/VSCode terminal).
10% GitHub/GitLab ‚Üí for Pull Requests, reviewing code, repo settings.


check if git present
git --version

if not present, to install git
sudo apt update
sudo apt install git -y

-y is Good for quick installs, its giving yes in advance

Set username & email (used in commits):

git config --global user.name "Your Name"
git config --global user.email "your@email.com"

Verify:
   git config --list

Initialize a Repository

mkdir git-practice
cd git-practice
git init

Think of git init as turning version control ON for a folder.
This creates a hidden .git/ folder to track changes.

First File & Commit
Create a file:
echo "Hello Git" > hello.txt

Check status:
git status

Add file to staging:
git add hello.txt

Commit:
git commit -m "First commit: add hello.txt"

Making Changes
 Edit the file:
echo "Learning Git step by step" >> hello.txt

Check difference:
git diff

Stage & commit:
git add hello.txt
git commit -m "Updated hello.txt with learning message"

-m refers to message commit with a meesage like Updated
[You can edit files as much as you want, but Git only records them when you stage and commit]

Stage all modified files:
git add .

Commit directly (skips staging, not recommended for teamwork):
git commit -am "Quick commit"

‚ö†Ô∏è Note: -am only works for already tracked files (files that were added at least once before).

View History

See commit history:
git log --oneline

Undo staging (if needed):
git reset hello.txt

Discard changes (revert file to last commit):
git checkout -- hello.txt

Remote Repo Basics

üëâ For now, you can create a new repo on GitHub (don‚Äôt add README/license).
Then connect it:

git remote add origin https://github.com/<your-username>/<repo-name>.git
git branch -M main
git push -u origin main


Check remote:
git remote -v

Pulling latest:
git pull origin main
