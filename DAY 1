Git Essentials

Before that,
Version Control System (VCS) = tool that tracks changes to files over time.
Think of it like a time machine for code â€” you can see who changed what, when, and why, and roll back if needed.

Two types of VCS:

Centralized VCS (CVCS) â€“ one central server (e.g., SVN, CVS). Everyone pulls/pushes changes from that single place.
Problem: If server goes down, no one can work.

Distributed VCS (DVCS) â€“ every developer has a full copy of the repo (e.g., Git).
Benefit: Work offline, full history on your machine, safer, faster.
ðŸ‘‰ Git is a DVCS.

ðŸ”¹ Why Git?

Tracks changes (who/when/what).
Allows branching & merging â†’ developers can work on features in isolation and then combine.
Handles conflicts when two people change the same part of a file.
Plays well with remote hosting platforms like GitHub, GitLab, Bitbucket for collaboration.

ðŸ”¹ How We Manage Git

There are two ways:
Command-line (CLI) â†’
Running Git commands on your machine/instance.

UI (Web Interface like GitHub/GitLab) â†’
Manage repos visually (create repo, open pull requests, review code).
But actual development workflow (commits, branching, merges) is done locally via CLI.

ðŸ‘‰ In real-world DevOps jobs:
90% Git work â†’ from terminal (your instance/VSCode terminal).
10% GitHub/GitLab â†’ for Pull Requests, reviewing code, repo settings.


check if git present
git --version

if not present, to install git
sudo apt update
sudo apt install git -y

-y is Good for quick installs, its giving yes in advance

Set username & email (used in commits):

git config --global user.name "Your Name"
git config --global user.email "your@email.com"

Verify:
   git config --list
